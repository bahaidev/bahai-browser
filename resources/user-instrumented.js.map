{"version":3,"file":"user-instrumented.js","sources":["../node_modules/textbrowser/node_modules/simple-get-json/dist/index-polyglot.mjs","user.js"],"sourcesContent":["/* eslint-disable node/no-unsupported-features/es-syntax */\n\n/**\n * @callback getJSONCallback\n * @param {string|string[]} jsonURL\n * @param {SimpleJSONCallback} cb\n * @param {SimpleJSONErrback} errBack\n * @returns {Promise<JSON>}\n */\n\n/**\n * @param {PlainObject} cfg\n * @param {fetch} cfg.fetch\n * @returns {getJSONCallback}\n */\nfunction _await$2(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _invoke$1(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction buildGetJSONWithFetch({\n  // eslint-disable-next-line no-shadow\n  fetch = typeof window !== 'undefined' ? window.fetch : self.fetch\n} = {}) {\n  /**\n  * @callback SimpleJSONCallback\n  * @param {JSON} json\n  * @returns {void}\n  */\n\n  /**\n  * @callback SimpleJSONErrback\n  * @param {Error} err\n  * @param {string|string[]} jsonURL\n  * @returns {void}\n  */\n\n  /**\n  * @type {getJSONCallback}\n  */\n  return function getJSON(jsonURL, cb, errBack) {\n    try {\n      let _exit = false;\n      return _await$2(_catch(function () {\n        return _invoke$1(function () {\n          if (Array.isArray(jsonURL)) {\n            return _await$2(Promise.all(jsonURL.map(url => {\n              return getJSON(url);\n            })), function (arrResult) {\n              if (cb) {\n                // eslint-disable-next-line node/callback-return, node/no-callback-literal, promise/prefer-await-to-callbacks\n                cb(...arrResult);\n              }\n\n              _exit = true;\n              return arrResult;\n            });\n          }\n        }, function (_result) {\n          return _exit ? _result : _await$2(fetch(jsonURL), function (resp) {\n            return _await$2(resp.json(), function (result) {\n              return typeof cb === 'function' // eslint-disable-next-line promise/prefer-await-to-callbacks\n              ? cb(result) : result; // https://github.com/bcoe/c8/issues/135\n\n              /* c8 ignore next */\n            });\n          });\n        });\n      }, function (e) {\n        e.message += ` (File: ${jsonURL})`;\n\n        if (errBack) {\n          return errBack(e, jsonURL);\n        }\n\n        throw e; // https://github.com/bcoe/c8/issues/135\n\n        /* c8 ignore next */\n      }));\n      /* c8 ignore next */\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\n/* eslint-disable node/no-unsupported-features/node-builtins,\n  node/no-unsupported-features/es-syntax, compat/compat */\n// Needed for polyglot support (no `path` in browser); even if\n//  polyglot using dynamic `import` not supported by Rollup (complaining\n//  of inability to do tree-shaking in UMD builds), still useful to delay\n//  path import for our testing, so that test can import this file in\n//  the browser without compilation without it choking\nlet dirname, isWindows;\n\nfunction _empty() {}\n/**\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction _invokeIgnored(body) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(_empty);\n  }\n}\n\nfunction _async$1(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nconst setDirname = _async$1(function () {\n  return _invokeIgnored(function () {\n    if (!dirname) {\n      return _await$1(import('path'), function (_import) {\n        ({\n          dirname\n        } = _import);\n      });\n    }\n  });\n});\n\nfunction fixWindowsPath(path) {\n  if (!isWindows) {\n    isWindows = process.platform === 'win32';\n  }\n\n  return path.slice( // https://github.com/bcoe/c8/issues/135\n\n  /* c8 ignore next */\n  isWindows ? 1 : 0);\n}\n/**\n * @param {string} url\n * @returns {string}\n */\n\n\nfunction getDirectoryForURL(url) {\n  // Node should be ok with this, but transpiling\n  //  to `require` doesn't work, so detect Windows\n  //  to remove slash instead\n  // \"file://\" +\n  return fixWindowsPath(dirname(new URL(url).pathname));\n}\n\n/* eslint-disable node/no-unsupported-features/es-syntax */\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nlet nodeFetch;\n/**\n * @param {PlainObject} cfg\n * @param {string} cfg.baseURL\n * @param {string} cfg.cwd\n * @returns {getJSONCallback}\n */\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _call(body, then, direct) {\n  if (direct) {\n    return then ? then(body()) : body();\n  }\n\n  try {\n    var result = Promise.resolve(body());\n    return then ? result.then(then) : result;\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction buildGetJSON({\n  baseURL,\n  cwd: basePath\n} = {}) {\n  const _fetch = typeof window !== 'undefined' || typeof self !== 'undefined' ? typeof window !== 'undefined' ? window.fetch : self.fetch : _async(function (jsonURL) {\n    let _exit = false;\n    return _invoke(function () {\n      if (/^https?:/u.test(jsonURL)) {\n        return _invoke(function () {\n          if (!nodeFetch) {\n            return _await(import('node-fetch'), function (_import) {\n              nodeFetch = _import;\n            });\n          }\n        }, function () {\n          const _nodeFetch$default = nodeFetch.default(jsonURL);\n\n          _exit = true;\n          return _nodeFetch$default;\n        });\n      }\n    }, function (_result) {\n      return _exit ? _result : _invoke(function () {\n        if (!basePath) {\n          return _call(setDirname, function () {\n            basePath = baseURL ? getDirectoryForURL(baseURL) : typeof window === 'undefined' && process.cwd();\n          });\n        }\n      }, function () {\n        // Filed https://github.com/bergos/file-fetch/issues/12 to see\n        //  about getting relative basePaths in `file-fetch` and using\n        //  that better-tested package instead\n        return _await(import('local-xmlhttprequest'), function (localXMLHttpRequest) {\n          // eslint-disable-next-line no-shadow\n          const XMLHttpRequest = localXMLHttpRequest.default({\n            basePath\n          }); // Don't change to an import as won't resolve for browser testing\n          // eslint-disable-next-line promise/avoid-new\n\n          return new Promise((resolve, reject) => {\n            const r = new XMLHttpRequest();\n            r.open('GET', jsonURL, true); // r.responseType = 'json';\n            // eslint-disable-next-line unicorn/prefer-add-event-listener -- May not be available\n\n            r.onreadystatechange = function () {\n              // Not sure how to simulate `if`\n\n              /* c8 ignore next */\n              if (r.readyState !== 4) {\n                return;\n              }\n\n              if (r.status === 200) {\n                // var json = r.json;\n                const response = r.responseText;\n                resolve({\n                  json: () => JSON.parse(response)\n                });\n                return;\n              }\n\n              reject(new SyntaxError('Failed to fetch URL: ' + jsonURL + 'state: ' + r.readyState + '; status: ' + r.status));\n            };\n\n            r.send(); // https://github.com/bcoe/c8/issues/135\n\n            /* c8 ignore next */\n          });\n          /* c8 ignore next */\n        });\n      });\n    });\n  });\n\n  const ret = buildGetJSONWithFetch({\n    fetch: _fetch\n  });\n  ret._fetch = _fetch;\n  ret.hasURLBasePath = Boolean(baseURL);\n  ret.basePath = basePath;\n  return ret;\n}\n\nconst getJSON = buildGetJSON();\n\nexport { buildGetJSON, getJSON };\n//# sourceMappingURL=index-polyglot.mjs.map\n","import TextBrowser from '../node_modules/textbrowser/dist/index-es.js';\n\n// Todo: Add a favicon file (and remove empty one in HTML?)\n// import loadStylesheets from '../node_modules/load-stylesheets/dist/index-es.js';\n// loadStylesheets('favicon.ico'); // No need for `await`\n\n// Todo: Reenable the following in `files.json`?\n// {\"name\": \"collins\", \"file\": {\"$ref\": \"data/other-works/Collins.json\"}, \"schemaFile\": \"Collins.jsonschema\", \"metadataFile\": \"Collins.metadata\"},\n\n/*\n// This will only work from subdomains; would need postMessage()\n//    routine to allow introspection\nconst params = new URLSearchParams(location.hash.slice(1));\ndocument.domain = params.get('domain') || document.domain; // Let this be iframe-embeddable\n*/\n\nconst tb = new TextBrowser({\n  // languages: 'node_modules/textbrowser/appdata/languages.json', // Default\n  // serviceWorkerPath: 'sw.js', // Default\n  // site: 'site.json', // Default\n  // localizeParamNames: true, // Not well-tested\n  // hideFormattingSection: true,\n  // requestPersistentStorage: false,\n  // showEmptyInterlinear: false,\n  // showTitleOnSingleInterlinear: false,\n  namespace: 'bahaiwritings',\n  version: '0.44.0',\n  files: 'files.json',\n  stylesheets: [\n    '@builtin', 'resources/user.css', 'node_modules/tippy.js/dist/tippy.css'\n  ],\n  allowPlugins: true,\n  // dynamicBasePath: '',\n  trustFormatHTML: true,\n  skipIndexedDB: false,\n  interlinearSeparator: '<hr />', // Defaults to `<br /><br />`,\n  preferencesPlugin: ({\n    $, l, jml, paramsSetter, getDataForSerializingParamsAsURL, work,\n    replaceHash, getFieldAliasOrNames\n  }) => ['div', [\n    // Todo: Move this into plugin and have textbrowser call\n    ['label', [\n      'Your wiki user name: ',\n      ['input', {\n        $on: {\n          change (e) {\n            localStorage.setItem('bahai-browser-wikilinks-existing-username', e.target.value);\n          }\n        },\n        id: 'wikilinks-existing-username',\n        value: localStorage.getItem('bahai-browser-wikilinks-existing-username') || '',\n        placeholder: 'e.g., Brettz9'\n      }],\n      ['br', 'br']\n    ]],\n    // Todo: i18nize (ideally with intl-dom)\n    (window.chrome\n      ? ['div', {id: 'generate-results', hidden: 'true'}, [\n        ['div', {class: 'msg-error', hidden: 'true'}, [\n          'Failed to copy to clipboard'\n        ]],\n        ['div', {class: 'msg-success', hidden: 'true'}, [\n          'Sucessfully copied to clipboard!'\n        ]],\n        ['div', {id: 'loading'}, [\n          'Loading...'\n        ]],\n        ['ol', {id: 'steps', hidden: 'true'}, [\n          ['li', [\n            'Copy the following code (or ',\n            ['button', {id: 'copy', $on: {\n              async click () {\n                const closeMessages = () => {\n                  setTimeout(() => {\n                    $('.msg-success').hidden = true;\n                    $('.msg-error').hidden = true;\n                  }, 2000);\n                };\n                try {\n                  await navigator.clipboard.writeText($('#code').value);\n                  $('.msg-success').hidden = false;\n                } /* istanbul ignore next -- How to trigger? */ catch (err) {\n                  /* istanbul ignore next -- How to trigger? */\n                  $('.msg-error').hidden = false;\n                } finally {\n                  closeMessages();\n                }\n              }\n            }}, [\n              'click me'\n            ]],\n            ' to copy automatically):',\n            ['textarea', {id: 'code'}]\n          ]],\n          ['li', [\n            'The following steps should be done together (without coming back to this page)',\n            ['ol', {type: 'a'}, [\n              ['li', [\n                'Visit ',\n                ['i', [\n                  'chrome://settings/searchEngines'\n                ]],\n                ' (but don\\'t copy-paste this URL or you may overwrite the copying just done)'\n              ]],\n              ['li', [\n                'Open the Console (cmd-option-j)'\n              ]],\n              ['li', [\n                'Paste the code copied in the previous step into the console and hit enter'\n              ]]\n            ]]\n          ]]\n        ]]\n      ]]\n      /* istanbul ignore next -- How to trigger? */\n      : ['div', {id: 'generate-results', hidden: 'true'}, [\n        ['div', {id: 'loading'}, [\n          'Loading...'\n        ]]\n      ]]\n    ),\n    ['button', {\n      title: l('bookmark_generation_tooltip'),\n      $on: {\n        async click (e) { // Todo: Give option to edit (keywords and work URLs)\n          if ($('#generate-results').hidden) {\n            $('#generate-results').hidden = false;\n          } else {\n            $('#generate-results').hidden = true;\n            return;\n          }\n\n          const getUrlForFieldAliasOrNames = ({\n            fieldAliasOrNames, workName\n          }) => {\n            const paramsCopy = paramsSetter({\n              ...getDataForSerializingParamsAsURL(),\n              fieldAliasOrNames,\n              workName: work, // Delete work of current page\n              type: 'shortcutResult'\n            });\n            return replaceHash(paramsCopy) + `&work=${workName}&${workName}-startEnd1=%s`; // %s will be escaped if set as param; also add changeable workName here\n          };\n\n          const fieldAliasOrNames = await getFieldAliasOrNames();\n\n          /* istanbul ignore if */\n          if (!window.chrome) {\n            const date = Date.now();\n            const ADD_DATE = date;\n            const LAST_MODIFIED = date;\n            const blob = new Blob([\n              new XMLSerializer().serializeToString(\n                jml({$document: {\n                  $DOCTYPE: {name: 'NETSCAPE-Bookmark-file-1'},\n                  title: l('Bookmarks'),\n                  body: [\n                    ['h1', [l('Bookmarks_Menu')]],\n                    ...fieldAliasOrNames.flatMap(({groupName, worksToFields}) => {\n                      return [\n                        ['dt', [\n                          ['h3', {\n                            ADD_DATE,\n                            LAST_MODIFIED\n                          }, [\n                            groupName\n                          ]]\n                        ]],\n                        ['dl', [\n                          ['p'],\n                          ...worksToFields.map(({fieldAliasOrNames, workName, shortcut: SHORTCUTURL}) => {\n                            // Todo (low): Add anchor, etc. (until handled by `work-startEnd`); &aqdas-anchor1-1=2&anchorfield1=Paragraph\n                            // Todo: option for additional browse field groups (startEnd2, etc.)\n                            // Todo: For link text, use `heading` or `alias` from metadata files in place of workName (requires loading all metadata files though)\n                            // Todo: Make Chrome NativeExt add-on to manipulate its search engines (to read a bookmarks file from Firefox properly, i.e., including keywords) https://www.makeuseof.com/answers/export-google-chrome-search-engines-address-bar/\n\n                            const url = getUrlForFieldAliasOrNames({\n                              workName, fieldAliasOrNames\n                            });\n\n                            return ['dt', [\n                              ['a', {\n                                href: url,\n                                ADD_DATE,\n                                LAST_MODIFIED,\n                                SHORTCUTURL\n                              }, [\n                                workName\n                              ]]\n                            ]];\n                          })\n                        ]]\n                      ];\n                    })\n                  ]\n                }})\n              ).replace(\n                // Chrome has a quirk that requires this (and not\n                //   just any whitespace)\n                // We're not getting the keywords with Chrome,\n                //   but at least usable for bookmarks (though\n                //   not the groups apparently); update: actually, now we're\n                //   not using this in Chrome at all, but keeping in case expose\n                /<dt>/gu,\n                '\\n<dt>'\n              )\n            ], {type: 'text/html'});\n            const url = window.URL.createObjectURL(blob);\n            const a = jml('a', {\n              hidden: true,\n              download: 'bookmarks.html',\n              href: url\n            }, $('#main'));\n            a.click();\n            URL.revokeObjectURL(url);\n            $('#loading').hidden = true;\n            return;\n          }\n\n          const urls = fieldAliasOrNames.flatMap(({groupName, worksToFields}) => {\n            return worksToFields.map(({fieldAliasOrNames, workName, shortcut: SHORTCUTURL}) => {\n              const url = getUrlForFieldAliasOrNames({\n                workName, fieldAliasOrNames\n              });\n              return {\n                short_name: workName,\n                keyword: SHORTCUTURL,\n                url\n              };\n            });\n          });\n          // Keep `var` instead of `let`/`const` so can be re-pasted if needed\n          $('#code').value = `  var searchEngines = ${JSON.stringify(urls)};\n\nsearchEngines.forEach(({ short_name, keyword, url }) => {\n// Actual search engine import magic\nchrome.send('searchEngineEditStarted', [-1]);\nchrome.send('searchEngineEditCompleted', [short_name, keyword, url]);\n});`;\n          $('#loading').hidden = true;\n          $('#steps').hidden = false;\n        }\n      }\n    }, [l('Generate_bookmarks')]]\n  ]]\n});\nawait tb.init();\n// Stylesheets have loaded and init process begun/completing\n"],"names":["then","direct","TextBrowser","namespace","version","files","stylesheets","allowPlugins","trustFormatHTML","skipIndexedDB","interlinearSeparator","preferencesPlugin","$","l","jml","paramsSetter","getDataForSerializingParamsAsURL","work","replaceHash","getFieldAliasOrNames","$on","change","e","localStorage","setItem","target","value","id","getItem","placeholder","window","chrome","hidden","class","click","setTimeout","clipboard","writeText","err","closeMessages","type","title","getUrlForFieldAliasOrNames","fieldAliasOrNames","workName","paramsCopy","date","Date","now","LAST_MODIFIED","blob","XMLSerializer","serializeToString","$document","$DOCTYPE","name","body","flatMap","groupName","worksToFields","ADD_DATE","map","shortcut","SHORTCUTURL","url","href","replace","URL","createObjectURL","a","download","revokeObjectURL","urls","short_name","keyword","JSON","stringify","init"],"mappings":"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AA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,aAAA,CAAA,SAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,WAAA,CAAA,SAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IA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"}